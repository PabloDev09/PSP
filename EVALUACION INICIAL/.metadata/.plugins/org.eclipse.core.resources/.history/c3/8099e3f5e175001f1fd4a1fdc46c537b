package exercise1.classes;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import exercise1.exceptions.InvalidLetterLength;
import exercise1.exceptions.InvalidNLetrasException;

public class AlphabetSoup 
{
	public int nLetters;
	public int row;
	public int column;
	public char[][] matrix;
	
	public AlphabetSoup(int nLetters) throws InvalidNLetrasException
	{
		checkNLetters(nLetters);
	}
	
	@SuppressWarnings("static-access")
	public void placeHorizontalWord(String wordToIntroduce, Coordinate coordinates, String naturalOrInverse) throws InvalidLetterLength 
	{
		wordToIntroduce = wordToIntroduce.toUpperCase();
		naturalOrInverse = naturalOrInverse.toUpperCase();
		
		if(naturalOrInverse.equals("INVERSO")) 
		{
			wordToIntroduce = toInverse(wordToIntroduce);
		}
		
		if((wordToIntroduce.length() + 1) + coordinates.row > this.row )
		{
			throw new InvalidLetterLength();
		}
		else 
		{
			char[] letters = wordToIntroduce.toCharArray();
			for(int i = 0; i < letters.length; i++) 
			{
					this.matrix[coordinates.row][coordinates.column + i] = letters[i];
			}
		}
	}
	
	@SuppressWarnings("static-access")
	public void placeVerticalWord(String wordToIntroduce, Coordinate coordinates, String naturalOrInverse) throws InvalidLetterLength 
	{
		wordToIntroduce = wordToIntroduce.toUpperCase();
		naturalOrInverse = naturalOrInverse.toUpperCase();
		
		if(naturalOrInverse.equals("INVERSO")) 
		{
			wordToIntroduce = toInverse(wordToIntroduce);
		}
		
		if((wordToIntroduce.length() + 1) + coordinates.row > this.row )
		{
			throw new InvalidLetterLength();
		}
		else 
		{
			char[] letters = wordToIntroduce.toCharArray();
			for(int i = 0; i < letters.length; i++) 
			{
					this.matrix[coordinates.row + i][coordinates.column] = letters[i];
			}
		}
	}
	
	public void sendDataToFile() throws IOException 
	{
		String nameFile = "partida.txt";
		
		try(BufferedWriter writer = new BufferedWriter(new FileWriter(nameFile, true)))
		{
			writer.write(this.toString());
		}
		catch(IOException e)
		{
			e.printStackTrace(); 
		}
		
	}
	
	public void reloadDataFromFile(File file) throws IOException {
	    BufferedReader reader = null;
	    try {
	        reader = new BufferedReader(new FileReader(file));
	        String line;
	        int rowCount = 0;

	        while ((line = reader.readLine()) != null) {
	            rowCount++;
	        }

	        this.rows = rowCount;
	        this.matrix = new char[rowCount][];
	        
	        reader.close();
	        reader = new BufferedReader(new FileReader(file));
	        int currentRow = 0;

	        while ((line = reader.readLine()) != null) {
	            this.matrix[currentRow] = line.toCharArray();
	            currentRow++;
	        }
	    } catch (IOException e) {
	        e.printStackTrace();
	        throw e;
	    } finally {
	        if (reader != null) {
	            try {
	                reader.close();
	            } catch (IOException e) {
	                e.printStackTrace();
	            }
	        }
	    }
	}


	     

	
	private void checkNLetters(int nLetters) throws InvalidNLetrasException
	{
		if(nLetters <= 0) 
		{
			throw new InvalidNLetrasException();
		}
		else 
		{
			this.matrix = fillEmptyCells(nLetters);
			this.row = nLetters;
			this.column = nLetters;
		}
	}
	
	private char[][] fillEmptyCells(int nLetters) 
	{
		Random rand = new Random();
		char[][] matrixExe = new char[nLetters][nLetters];
		
		
		for(int i = 0; i < nLetters; i++) 
		{
			for(int j = 0; j < nLetters; j++) 
			{
				matrixExe[i][j] = (char) (rand.nextInt(26) + 'A');
			}
		}
		
		return matrixExe;
	}
	
	private static String toInverse(String wordToIntroduce) 
	{
        return new StringBuilder(wordToIntroduce).reverse().toString();
    }

	
	public Map<Character, Integer> showAlphabetSoup() {
	    Map<Character, Integer> summary = new HashMap<>();

	    for (char[] row : matrix) {
	        for (char letra : row) {
	            if (Character.isLetter(letra)) {
	                summary.merge(letra, 1, Integer::sum);
	            }
	        }
	    }

	    return summary;
	}

	public void printSummary() {
	    Map<Character, Integer> summary = showAlphabetSoup();
	    StringBuilder printedSummary = new StringBuilder("{");

	    summary.forEach((key, value) -> printedSummary.append(key).append('=').append(value).append(", "));
	    
	    if (printedSummary.length() > 1) {
	        printedSummary.setLength(printedSummary.length() - 2);
	    }
	    printedSummary.append("}");

	    System.out.println(printedSummary);
	}
	
	@Override
	public String toString() 
	{
	    StringBuilder matrixDraw = new StringBuilder();
	    for (int i = 0; i < this.row; i++) 
	    {
	        for (int j = 0; j < this.matrix[i].length; j++) 
	        {
	            matrixDraw.append(this.matrix[i][j]);
	            if (j < this.matrix[i].length - 1) 
	            {
	                matrixDraw.append(" ");
	            }
	        }
	        if (i < this.row - 1) 
	        {
	            matrixDraw.append("\n");
	        }
	    }
	    return matrixDraw.toString();
	}
	
	
}
